var root="undefined"!=typeof window?window:this,isElectron=()=>!("undefined"==typeof window||!window.process||!window.process.platform),isNodejs=()=>!("undefined"==typeof module||!module.exports),isCordova=()=>!("undefined"==typeof window||!window.hasOwnProperty("cordova")),fs=isNodejs()||isElectron()?require("fs"):{},path=isNodejs()||isElectron()?require("path"):{},atob=isNodejs()&&!isElectron()?require("atob"):window.atob,btoa=isNodejs()&&!isElectron()?require("btoa"):window.btoa,MCARD={},cryptr={encrypt:e=>ENCRYPT(e),decrypt:e=>DECRYPT(e)};function CLEAN(e,t){return Array.isArray(e)&&!Array.isArray(t)?"number"==typeof t?[t]:"string"==typeof t?t.split(","):e:!Array.isArray(e)&&Array.isArray(t)?"string"==typeof e?t.join(","):e:typeof e!=typeof t?"string"==typeof e?t.toString():"number"==typeof e?("string"==typeof t?parseFloat(t):e)||e:"boolean"==typeof e?1==t||0!=t&&("true"==t||"false"!=t&&e):e:t}function GET_RANDOM_STRING(e){for(var t="",r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",o=r.length,a=0;a<e;a++)t+=r.charAt(Math.floor(Math.random()*o));return t}function ENCRYPT(e){return e="string"==typeof MCARD.configObject.key?e+"@k:"+MCARD.configObject.key:e,e=(e=(e=(e=btoa(e)).reverse()).hexEncode()).reverse()}function DECRYPT(e){e=(e=(e=e.reverse()).hexDecode()).reverse();var t=(e=atob(e)).indexOf("@k:");if(-1!==t&&e.substring(t+3,e.length)!==MCARD.configObject.key)throw new Error("Invalid MemoryCard_Key");return e.replace(/(@k:).*$/,"")}MCARD.__config={slots:4,file:"./memorycard.data",storage:isNodejs()||isElectron()?{}:window.localStorage,key:null,temp:!1},MCARD.__cache={},MCARD.eventListeners=[],Object.defineProperty(MCARD,"loaded",{get:()=>MCARD.__config.loaded}),Object.defineProperty(MCARD,"configObject",{get:()=>MCARD.__config}),MCARD.config=(e=>{if(!0===MCARD.loaded)throw new Error("You can't change config once the MemoryCard was loaded.");if("object"!=typeof e)throw new Error("The provided parameter is not a json object.");if(!0===e.strict_mode&&!e.template)throw new Error('To use "strict_mode" you need to declare a template in config function.');if(!0===e.strict_mode&&Object.keys(e.template).length<=0)throw new Error("Your declared template doesn't have properties. You will always get a error at save( ) function call.");if(e.slots&&"number"!=typeof e.slots)throw new Error("slots property must be a number.");if(!0===e.temp)if(isNodejs()||isElectron()){var t=t=require("os").tmpdir();e.file=path.join(t,`./${GET_RANDOM_STRING(64).toUpperCase()}.data`)}else e.storage=window.sessionStorage;for(var r in e)MCARD.__config[r]=e[r];return!0}),MCARD.getSummary=(()=>{for(var e=MCARD.__config.slots||4,t=[],r=0;r<e;r++)t.push(MCARD.getSlot(r)),delete t[r].data,"string"==typeof t[r].date&&(t[r].DATE=new Date(t[r].date));return t}),MCARD.getAll=(()=>{for(var e=MCARD.__config.slots||4,t=[],r=0;r<e;r++)t.push(MCARD.getSlot(r)),"string"==typeof t[r].date&&(t[r].DATE=new Date(t[r].date));return t}),MCARD.getSlot=(e=>{var t=MCARD.__config.slots||4;if(e>=t)throw new Error("The defined index number is invalid. Must be less than the pre-configured MemoryCard.slots ("+t+")");return MCARD.__cache.slots&&MCARD.__cache.slots[e]?MCARD.__cache.slots[e]:(MCARD.read(),MCARD.__cache.slots[e]||{index:e,empty:!0,title:`Slot ${e+1}`})}),MCARD.read=(()=>{var e={},t=MCARD.__config.slots||4,r=MCARD.__config.file||"./memorycard.data",o=()=>{for(var e={key:MCARD.__config.key||null,date:(new Date).toISOString(),slots:[]},r=0;r<t;r++)e.slots.push({index:r,empty:!0,title:`Slot ${r+1}`});return e};if(isNodejs()||isElectron())if(fs.existsSync(r)){var a=fs.readFileSync(r,"utf8");try{s=cryptr.decrypt(a)}catch(e){throw new Error("Couldn't decrypt MemoryCard file. "+e.toString())}e=JSON.parse(s)}else{var n;e=o();try{n=cryptr.encrypt(JSON.stringify(e))}catch(e){throw new Error("Couldn't encrypt MemoryCard file. "+e.toString())}fs.writeFileSync(r,n)}else if(a=MCARD.__config.storage.getItem("virtualMemoryCard_data")){var s=DECRYPT(a);try{e=JSON.parse(s)}catch(e){throw new Error("Couldn't decrypt MemoryCard file. "+e.toString())}}else{e=o();s=ENCRYPT(JSON.stringify(e));MCARD.__config.storage.setItem("virtualMemoryCard_data",s)}for(var i=0;i<e.length;i++)e[i]||(e[i]={index:i,empty:!0,title:`Slot ${i+1}`});return MCARD.__cache=e,MCARD.fire("card-loaded",{card_data:e}),e}),MCARD.write=((e,t,r)=>{if("number"!=typeof e)throw new Error("Please define a slot_index to save data.");if("object"==typeof t&&(r=t,t=`Slot ${e}`),"object"!=typeof r)throw new Error("No data defined to save. Please set a object to write the data_slot in the memorycard.");if(MCARD.__cache.slots||MCARD.read(),e>=MCARD.__cache.slots.length)throw new Error("The slot_index must be less than the slots length available in the MemoryCard ("+MCARD.__cache.slots.length+")");const o=MCARD.__cache.slots[e].data;var a=r;if(!0===MCARD.configObject.strict_mode){var n=MCARD.configObject.template;if(void 0===n)throw new Error('Strict_Mode is enabled but can\'t find the "template slot" to clean the data in write( )');for(var s in o)a[s]||(a[s]=o[s]);for(var i in a)void 0===n[i]&&delete a[i],a[i]=CLEAN(n[i],a[i]);for(var s in n)void 0===a[s]&&(a[s]=n[s])}try{MCARD.__cache.slots[e].title=t||`Slot ${e+1}`,MCARD.__cache.slots[e].data=a,MCARD.__cache.slots[e].date=(new Date).toISOString(),MCARD.__cache.slots[e].empty=!1;var c=JSON.stringify(MCARD.__cache);if(isNodejs()||isElectron()){var l=cryptr.encrypt(c);fs.writeFileSync(MCARD.configObject.file,l)}else{l=ENCRYPT(c);MCARD.__config.storage.setItem("virtualMemoryCard_data",l)}}catch(t){throw MCARD.__cache.slots[e]=o,new Error("WRITE_MEMORYCARD_SLOT_ERROR ::"+t.toString())}return MCARD.fire("save",{type:"write",slot_index:e,slot_data:a}),!0}),MCARD.save=((e,t,r)=>{if("number"!=typeof e)throw new Error("Please define a slot_index to save data.");if("object"==typeof t&&(r=t,t=null),"object"!=typeof r)throw new Error("No data defined to save. Please set a object to write the data_slot in the memorycard.");if(MCARD.__cache.slots||MCARD.read(),e>=MCARD.__cache.slots.length)throw new Error("The slot_index must be less than the slots length available in the MemoryCard ("+MCARD.__cache.slots.length+")");var o=MCARD.__cache.slots[e].data;if(!o||!0===o.empty)throw new Error(`The Slot ${e} is Empty. You can only use save( ) in already used slots.`);var a=r;if(!0===MCARD.configObject.strict_mode){var n=MCARD.configObject.template;if(void 0===n)throw new Error('Strict_Mode is enabled but can\'t find the "template slot" to clean the data in write( )');for(var s in a)void 0!==o[s]&&(a[s]=CLEAN(o[s],a[s]));for(var i in o)void 0===a[i]&&(a[i]=o[i]);for(var s in a)void 0===n[s]&&delete a[s],a[s]=CLEAN(n[s],a[s]);for(var i in n)void 0===a[i]&&(a[i]=n[i])}try{MCARD.__cache.slots[e].title=t||MCARD.__cache.slots[e].title||`Slot ${e+1}`,MCARD.__cache.slots[e].data=a,MCARD.__cache.slots[e].date=(new Date).toISOString(),MCARD.__cache.slots[e].empty=!1;var c=JSON.stringify(MCARD.__cache);if(isNodejs()||isElectron()){var l=cryptr.encrypt(c);fs.writeFileSync(MCARD.configObject.file,l)}else{l=ENCRYPT(c);MCARD.__config.storage.setItem("virtualMemoryCard_data",l)}}catch(t){throw MCARD.__cache.slots[e]=o,new Error("WRITE_MEMORYCARD_SLOT_ERROR ::"+t.toString())}return MCARD.fire("save",{type:"save",slot_index:e,slot_data:a}),!0}),MCARD.load=(e=>{if("number"!=typeof e)throw new Error("Please declare a slot_index to load data from MemoryCard.");MCARD.__cache.slots||MCARD.read();var t=MCARD.getSlot(e);return t=t&&!1===t.empty?t.data:null,MCARD.fire("load",{slot_index:e,slot_data:t}),t}),MCARD.copy=((e,t)=>{if("number"!=typeof e)throw new Error("Please declare a ref_index to copy data.");if("number"!=typeof t)throw new Error("Please declare a dest_index to paste data.");MCARD.__cache.slots||MCARD.read();var r=MCARD.getSlot(e);if(!r||!1!==r.empty)throw new Error("The reference-slot doesn't have data to copy in the destination-slot. Please select another slot.");return MCARD.write(t,r.data,r.title),MCARD.fire("copy",{slot_index:t,slot_ref_index:e}),!0}),MCARD.delete=(e=>{if("number"!=typeof e)throw new Error("Please declare a slot_index to delete data.");MCARD.__cache.slots||MCARD.read();const t=MCARD.__cache.slots[e];try{MCARD.__cache.slots[e].title=`Slot ${e+1}`,MCARD.__cache.slots[e].empty=!0,delete MCARD.__cache.slots[e].date,delete MCARD.__cache.slots[e].data;var r=JSON.stringify(MCARD.__cache);if(isNodejs()||isElectron()){var o=cryptr.encrypt(r);fs.writeFileSync(MCARD.configObject.file,o)}else{o=ENCRYPT(r);MCARD.__config.storage.setItem("virtualMemoryCard_data",o)}}catch(r){throw MCARD.__cache.slots[e]=t,new Error("DELETE_MEMORYCARD_SLOT_ERROR ::"+r.toString())}return MCARD.fire("delete",{slot_index:e}),!0}),MCARD.format=(()=>{MCARD.__cache.slots||MCARD.read();const e=MCARD.__cache;try{for(var t=0;t<MCARD.__cache.slots.length;t++)MCARD.delete(t)}catch(t){throw MCARD.__cache=e,new Error("FORMAT_MEMORYCARD_ERROR ::"+t.toString())}return MCARD.fire("format",{card_data:MCARD.__cache}),!0}),MCARD.reset=(()=>(isNodejs()||isElectron()?fs.unlinkSync(MCARD.configObject.file):MCARD.__config.storage.removeItem("virtualMemoryCard_data"),!0)),MCARD.getCardData=(()=>{if(isNodejs()||isElectron()){var e=MCARD.configObject.file;return fs.existsSync(e)?fs.readFileSync(e,"utf8"):null}return MCARD.__config.storage.getItem("virtualMemoryCard_data")||null}),MCARD.setCardData=(e=>{if(void 0===e)throw new Error("Please provide a string with all encrypted data of your MemoryCard.");if(isNodejs()||isElectron()){try{JSON.parse(cryptr.decrypt(e))}catch(e){throw new Error("Invalid MemoryCard Data. "+e.toString())}fs.writeFileSync(f,e)}else{try{JSON.parse(DECRYPT(e))}catch(e){throw new Error("Invalid MemoryCard Data. "+e.toString())}MCARD.__config.storage.setItem("virtualMemoryCard_data",e)}return MCARD.read()}),MCARD.on=((e,t)=>{if("string"!=typeof e)throw new Error("Please define an event type as first parameter :: MemoryCard.on( eventType<string>, callback<function> )");if("function"!=typeof t)throw new Error("Please define an callback as second parameter :: MemoryCard.on( eventType<string>, callback<function> )");return MCARD.eventListeners.push({type:e,fn:t})}),MCARD.fire=((e,t)=>{for(var r=MCARD.eventListeners.filter(t=>t.type===e),o=0;o<r.length;o++)try{r[o].fn(t||{})}catch(t){console.error("Can't call \""+e+'" event callback ::',t)}}),MCARD.writeAsync=((e,t,r,o)=>new Promise((a,n)=>{return a(MCARD.write(e,t,r,o))})),MCARD.saveAsync=((e,t,r,o)=>new Promise((a,n)=>{return a(MCARD.save(e,t,r,o))})),MCARD.loadAsync=(e=>new Promise((t,r)=>{return t(MCARD.load(e))})),MCARD.readAsync=(()=>new Promise((e,t)=>{return e(MCARD.read())})),MCARD.copyAsync=((e,t,r)=>new Promise((o,a)=>{return o(MCARD.copy(e,t,r))})),MCARD.deleteAsync=((e,t)=>new Promise((r,o)=>{return r(MCARD.delete(e,t))})),MCARD.formatAsync=(e=>new Promise((t,r)=>{return t(MCARD.format(e))})),MCARD.resetAsync=(()=>new Promise((e,t)=>{return e(MCARD.reset())})),String.prototype.reverse=function(){return this.split("").reverse().join("")},String.prototype.hexEncode=function(){var e,t="";for(e=0;e<this.length;e++)t+=("000"+this.charCodeAt(e).toString(16)).slice(-4);return t},String.prototype.hexDecode=function(){var e,t=this.match(/.{1,4}/g)||[],r="";for(e=0;e<t.length;e++)r+=String.fromCharCode(parseInt(t[e],16));return r},"undefined"!=typeof module&&module.exports?(module.exports=MCARD,root.MCARD=MCARD,root.MemoryCard=MCARD):(root.MCARD=MCARD,root.MemoryCard=MCARD);